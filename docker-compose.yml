version: "3.9"

services:
  # This service runs the reverse proxy server for easier access to the other services.
  # It allows the use of more human-friendly domains instead of ports.
  traefik:
    profiles: [ "dagster" ]
    image: "traefik:v2.7"
    command:
      - "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      - dagster_network

  # This service runs the postgres DB used by dagster for run storage, schedule storage,
  # and event log storage.
  dagster_postgres:
    profiles: [ "dagster" ]
    image: postgres:14
    container_name: dagster_postgres
    environment:
      POSTGRES_USER: "postgres_user"
      POSTGRES_PASSWORD: "postgres_password"
      POSTGRES_DB: "dagster_db"
    networks:
      - dagster_network

  # This service runs the gRPC server that loads your user code, in both dagit
  # and dagster-daemon. By setting DAGSTER_CURRENT_IMAGE to its own image, we tell the
  # run launcher to use this same image when launching runs in a new container as well.
  # Multiple containers like this can be deployed separately - each just needs to run on
  # its own port, and have its own entry in the workspace.yaml file that's loaded by dagit.
  dagster_repo:
    profiles: [ "dagster" ]
    build:
      context: .
      dockerfile: ./code/dagster-repo/Dockerfile
    container_name: dagster_repo
    image: dagster_repo_image
    restart: always
    environment:
      DAGSTER_POSTGRES_USER: "postgres_user"
      DAGSTER_POSTGRES_PASSWORD: "postgres_password"
      DAGSTER_POSTGRES_DB: "dagster_db"
      DAGSTER_CURRENT_IMAGE: "dagster_repo_image"
    networks:
      - dagster_network

  # This service runs dagit, which loads your user code from the user code container.
  # Since our instance uses the QueuedRunCoordinator, any runs submitted from dagit will be put on
  # a queue and later dequeued and launched by dagster-daemon.
  dagster_dagit:
    profiles: [ "dagster" ]
    build:
      context: .
      dockerfile: ./services/dagster/Dockerfile
    entrypoint:
      - dagit
      - -h
      - "0.0.0.0"
      - -p
      - "3000"
      - -w
      - workspace.yaml
    container_name: dagster_dagit
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dagit.rule=Host(`dagit.127.0.0.1.nip.io`)"
      - "traefik.http.routers.dagit.entrypoints=web"
    expose:
      - "3000"
    ports:
      - "3000:3000"
    environment:
      DAGSTER_POSTGRES_USER: "postgres_user"
      DAGSTER_POSTGRES_PASSWORD: "postgres_password"
      DAGSTER_POSTGRES_DB: "dagster_db"
    volumes:
      # Make docker client accessible so we can terminate containers from dagit
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - dagster_network
    depends_on:
      - dagster_postgres
      - dagster_repo

  # This service runs the dagster-daemon process, which is responsible for taking runs
  # off of the queue and launching them, as well as creating runs from schedules or sensors.
  dagster_daemon:
    profiles: [ "dagster" ]
    build:
      context: .
      dockerfile: ./services/dagster/Dockerfile
    entrypoint:
      - dagster-daemon
      - run
    container_name: dagster_daemon
    restart: on-failure
    environment:
      DAGSTER_POSTGRES_USER: "postgres_user"
      DAGSTER_POSTGRES_PASSWORD: "postgres_password"
      DAGSTER_POSTGRES_DB: "dagster_db"
    volumes:
      # Make docker client accessible so we can launch containers using host docker
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - dagster_network
    depends_on:
      - dagster_postgres
      - dagster_repo

networks:
  dagster_network:
    driver: bridge
    name: dagster_network
